(define lastTime (time-seconds))
(define elapsedTime 0)

(define movement-speed 0.1)
(define (set-movement-speed speed)
  (set! movement-speed speed)
  (display (string-append "traits: setting speed: " (number->string speed) "\n"))
)

(define (update-config)
  (define traits (sql (sql-compile "select movement-speed from traits")))
  (if (= (length traits) 0)
    (display "no traits in config\n")
    (let ((firsttrait (list-ref traits 0)))
      (set-movement-speed (string->number (list-ref firsttrait 0)))
    )
  )
)


(define (onKey key scancode action mods) 
  (display "key: ")
  (display key)
  (display ", action: ")
  (display action)
  (display "\n")
  (if (= key 87)
    (begin 
      (if (= action 1) (set! go-forward #t))
      (if (= action 0) (set! go-forward #f))
    )
  )
  (if (= key 65)
    (begin
      (if (= action 1) (set! go-left #t))
      (if (= action 0) (set! go-left #f))
    )
  )
  (if (= key 83)
    (begin
      (if (= action 1) (set! go-backward #t))
      (if (= action 0) (set! go-backward #f))
    )
  )
  (if (= key 68)
    (begin
      (if (= action 1) (set! go-right #t))
      (if (= action 0) (set! go-right #f))
    )
  )
  (if (and (= key 345) (= action 1)) (update-config))
)

(define (move x y z) 
  (display "move placeholder: ")
  (display x) (display " ")
  (display y) (display " ")
  (display z) (display "\n")
  (applyimpulse-rel mainobj (list x y z))
)

(define go-forward #f)
(define go-left #f)
(define go-backward #f)
(define go-right #f)
(define (onFrame)
  (define currTime (time-seconds))
  (set! elapsedTime (- currTime lastTime))
  (set! lastTime currTime)
  (if (equal? go-forward  #t) (move 0 0 (* -1 movement-speed)))
  (if (equal? go-left     #t) (move (* -0.8 movement-speed) 0 0))
  (if (equal? go-right    #t) (move (* 0.8 movement-speed) 0 0))
  (if (equal? go-backward #t) (move 0 0 movement-speed))
)
